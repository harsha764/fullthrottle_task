{"version":3,"sources":["components/calenderComp.js","components/model.js","App.js","serviceWorker.js","index.js"],"names":["localizer","momentLocalizer","moment","Calender","props","changeViewType","e","setState","viewType","state","events","myEventsList","this","length","x","event","startDate","start_time","format","split","endDate","end_time","obj","id","title","start","Date","end","push","startAccessor","endAccessor","style","height","view","onView","React","Component","ModalComp","toggle","modal","buttonLabel","className","activities","Button","color","onClick","Modal","isOpen","ModalHeader","ModalBody","map","activity","index","key","App","members","fetch","then","response","json","data","ok","catch","err","console","log","member","real_name","tz","activity_periods","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ddde7e39.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Calendar, momentLocalizer } from 'react-big-calendar'\r\nimport moment from 'moment'\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css'\r\n\r\nconst localizer = momentLocalizer(moment)\r\n\r\n\r\nclass Calender extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            events: this.props.events ? this.props.events : [],\r\n            viewType: 'week'\r\n        }\r\n    }\r\n\r\n    changeViewType = (e) => {\r\n        this.setState({\r\n            viewType: e\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let myEventsList = []\r\n        if (this.state.events.length > 0) {\r\n            for (var x = 0; x < this.state.events.length; x++) {\r\n                var event = this.state.events[x]\r\n                var SD = moment(event.start_time, 'LLL').format('YYYY-MM-DD-HH-mm-ss');\r\n                var startDate = SD.split('-');\r\n                var ED = moment(event.end_time, 'LLL').format('YYYY-MM-DD-HH-mm-ss');\r\n                var endDate = ED.split('-');\r\n                let obj = {\r\n                    id: x,\r\n                    title: 'Period - ' + (x + 1),\r\n                    start: new Date(startDate[0], startDate[1] - 1, startDate[2], startDate[3], startDate[4], startDate[5]),\r\n                    end: new Date(endDate[0], endDate[1] - 1, endDate[2], endDate[3], endDate[4], endDate[5]),\r\n                }\r\n                myEventsList.push(obj)\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Calendar\r\n                    localizer={localizer}\r\n                    events={myEventsList}\r\n                    startAccessor=\"start\"\r\n                    endAccessor=\"end\"\r\n                    style={{ height: 500 }}\r\n                    view={this.state.viewType}\r\n                    onView={this.changeViewType}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calender;","import React from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody } from 'reactstrap';\r\nimport Calender from './calenderComp'\r\n\r\nclass ModalComp extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            buttonLabel: this.props.buttonLabel ? this.props.buttonLabel : \"\",\r\n            className: this.props.className ? this.props.className : \"\",\r\n            modal: false,\r\n            title: this.props.title ? this.props.title : \"Header\",\r\n            activities: this.props.activities ? this.props.activities : [{}]\r\n        }\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button color=\"danger\" onClick={this.toggle}>{this.state.buttonLabel}</Button>\r\n                <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.state.className}>\r\n                    <ModalHeader toggle={this.toggle}>{this.state.title}</ModalHeader>\r\n                    <ModalBody>\r\n                        {this.state.activities.length > 0\r\n                            ? (\r\n                                <div>\r\n                                    <table className=\"table table-bordered text-center\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>S.NO</th>\r\n                                                <th>Start Time</th>\r\n                                                <th>End Time</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {this.state.activities.map((activity, index) => {\r\n                                                return (\r\n                                                    <tr key={index}>\r\n                                                        <td>{index + 1}</td>\r\n                                                        <td>{activity.start_time}</td>\r\n                                                        <td>{activity.end_time}</td>\r\n                                                    </tr>)\r\n                                            })}\r\n                                        </tbody>\r\n                                    </table>\r\n                                    <div>\r\n                                        <Calender events={this.state.activities} />\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                            : null\r\n                        }\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ModalComp;","import React from 'react'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ModalComp from './components/model';\n\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      members: []\n    }\n  }\n\n  componentDidMount() {\n    fetch('test.json').then(response => {\n      return response.json();\n    }).then(data => {\n      if (data.ok) {\n        this.setState({\n          members: data.members\n        })\n      }\n    }).catch(err => {\n      console.log(\"Error in accessing the Json file\")\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\" >\n        <h1 className=\"text-center\">Users List</h1>\n        <table className=\"table table-bordered text-center\">\n          <thead className=\"table-dark\">\n            <tr>\n              <th>Id</th>\n              <th>Name</th>\n              <th>TimeZone</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              this.state.members.map((member, key) => {\n                return (<tr key={key}>\n                  <td>{member.id}</td>\n                  <td>{member.real_name}</td>\n                  <td>{member.tz}</td>\n                  <td><ModalComp buttonLabel=\"View\" title={member.id} activities={member.activity_periods} /></td>\n                </tr>)\n              }\n              )\n            }\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}